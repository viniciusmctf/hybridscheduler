
unit_test.elf:     file format elf32-littlenios2
unit_test.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00200140

Program Header:
    LOAD off    0x00001000 vaddr 0x00200000 paddr 0x00200000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00200020 paddr 0x00200020 align 2**12
         filesz 0x00000b08 memsz 0x00000b08 flags r-x
    LOAD off    0x00001b28 vaddr 0x00200b28 paddr 0x00200b30 align 2**12
         filesz 0x00000008 memsz 0x00000008 flags rw-
    LOAD off    0x00001b38 vaddr 0x00200b38 paddr 0x00200b38 align 2**12
         filesz 0x00000000 memsz 0x00000110 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00200000  00200000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000120  00200020  00200020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00000920  00200140  00200140  00001140  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000000c8  00200a60  00200a60  00001a60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00000008  00200b28  00200b30  00001b28  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000110  00200b38  00200b38  00001b38  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000026  00000000  00000000  00001b30  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00000278  00000000  00000000  00001b58  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 00000312  00000000  00000000  00001dd0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   0000152e  00000000  00000000  000020e2  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00000a95  00000000  00000000  00003610  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   000026f2  00000000  00000000  000040a5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00000320  00000000  00000000  00006798  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00000711  00000000  00000000  00006ab8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00000659  00000000  00000000  000071c9  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000030  00000000  00000000  00007824  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000090  00000000  00000000  00007858  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  00008903  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000c  00000000  00000000  00008906  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  00008912  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  00008913  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   0000000b  00000000  00000000  00008914  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    0000000b  00000000  00000000  0000891f  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   0000000b  00000000  00000000  0000892a  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 0000000b  00000000  00000000  00008935  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 0000003b  00000000  00000000  00008940  2**0
                  CONTENTS, READONLY
 26 .sopcinfo     0002a9d7  00000000  00000000  0000897b  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00200000 l    d  .entry	00000000 .entry
00200020 l    d  .exceptions	00000000 .exceptions
00200140 l    d  .text	00000000 .text
00200a60 l    d  .rodata	00000000 .rodata
00200b28 l    d  .rwdata	00000000 .rwdata
00200b38 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00200188 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 main.c
002001e8 l     F .text	00000020 irqhandler
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_load.c
00200700 l     F .text	00000020 alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_printf.c
00000000 l    df *ABS*	00000000 alt_putchar.c
00000000 l    df *ABS*	00000000 alt_putstr.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 strlen.c
0020078c g     F .text	0000002c alt_main
00200b48 g     O .bss	00000100 alt_irq
00200b30 g       *ABS*	00000000 __flash_rwdata_start
0020094c g     F .text	00000038 alt_putstr
00200000 g     F .entry	0000001c __reset
00200020 g       *ABS*	00000000 __flash_exceptions_start
00200b40 g     O .bss	00000004 alt_argv
00208b28 g       *ABS*	00000000 _gp
0020042c g     F .text	0000005c reset
0020018c g     F .text	0000005c int_ack
00200000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
00200a08 g     F .text	00000038 alt_icache_flush
00200660 g     F .text	000000a0 alt_irq_register
00200c48 g       *ABS*	00000000 __bss_end
00200378 g     F .text	00000058 enable
00200b38 g     O .bss	00000004 alt_irq_active
002000ec g     F .exceptions	00000054 alt_irq_handler
002009dc g     F .text	00000018 alt_dcache_flush_all
00200b30 g       *ABS*	00000000 __ram_rwdata_end
00200b28 g       *ABS*	00000000 __ram_rodata_end
00200b2c g     O .rwdata	00000004 jtag_uart_0
00200c48 g       *ABS*	00000000 end
0020031c g     F .text	0000005c disable
00208000 g       *ABS*	00000000 __alt_stack_pointer
002009a8 g     F .text	00000034 altera_avalon_jtag_uart_write
002007b8 g     F .text	00000144 alt_printf
00200140 g     F .text	0000004c _start
00200984 g     F .text	00000004 alt_sys_init
00200b28 g       *ABS*	00000000 __ram_rwdata_start
00200a60 g       *ABS*	00000000 __ram_rodata_start
002002c0 g     F .text	0000005c create
00200c48 g       *ABS*	00000000 __alt_stack_base
00200b38 g       *ABS*	00000000 __bss_start
00200488 g     F .text	000001d8 main
00200b44 g     O .bss	00000004 alt_envp
00200208 g     F .text	0000005c size
00200a60 g       *ABS*	00000000 __flash_rodata_start
00200988 g     F .text	00000020 alt_irq_init
00200b3c g     O .bss	00000004 alt_argc
00200020 g       .exceptions	00000000 alt_irq_entry
00200020 g       *ABS*	00000000 __ram_exceptions_start
00200b30 g       *ABS*	00000000 _edata
00200c48 g       *ABS*	00000000 _end
00200140 g       *ABS*	00000000 __ram_exceptions_end
00200a00 g     F .text	00000008 altera_nios2_qsys_irq_init
0020001c g       .entry	00000000 exit
00208000 g       *ABS*	00000000 __alt_data_end
00200020 g     F .exceptions	00000000 alt_exception
002003d0 g     F .text	0000005c update
00200264 g     F .text	0000005c insert
0020001c g       .entry	00000000 _exit
00200a40 g     F .text	00000020 strlen
002008fc g     F .text	00000050 alt_putchar
002009f4 g     F .text	0000000c alt_icache_flush_all
00200b28 g     O .rwdata	00000004 alt_priority_mask
00200720 g     F .text	0000006c alt_load



Disassembly of section .entry:

00200000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && !defined(ALT_SIM_OPTIMIZE)
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
  200000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
  200004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
  200008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
  20000c:	00bffd16 	blt	zero,r2,200004 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
  200010:	00400834 	movhi	at,32
    ori r1, r1, %lo(_start)
  200014:	08405014 	ori	at,at,320
    jmp r1
  200018:	0800683a 	jmp	at

0020001c <_exit>:
  20001c:	00000000 	call	0 <__alt_mem_onchip_memory2_0-0x200000>

Disassembly of section .exceptions:

00200020 <alt_exception>:
         * Process an exception.  For all exceptions we must preserve all
         * caller saved registers on the stack (See the Nios2 ABI
         * documentation for details).
         */

        addi  sp, sp, -76
  200020:	deffed04 	addi	sp,sp,-76

#endif

#endif

        stw   ra,  0(sp)
  200024:	dfc00015 	stw	ra,0(sp)
        /*
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */

        stw   r1,   8(sp)
  200028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  20002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  200030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  200034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  200038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  20003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  200040:	d9c00815 	stw	r7,32(sp)

        rdctl r5, estatus
  200044:	000b307a 	rdctl	r5,estatus

        stw   r8,  36(sp)
  200048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  20004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  200050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  200054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  200058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  20005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  200060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  200064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  200068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  20006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  200070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  200074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  200078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  20007c:	10000326 	beq	r2,zero,20008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  200080:	20000226 	beq	r4,zero,20008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  200084:	02000ec0 	call	2000ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  200088:	00000306 	br	200098 <alt_exception+0x78>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
  20008c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
  200090:	e8bfff17 	ldw	r2,-4(ea)
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
  200094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  200098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  20009c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  2000a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  2000a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  2000a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  2000ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  2000b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  2000b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  2000b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  2000bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  2000c0:	d9c00817 	ldw	r7,32(sp)
#ifdef ALT_STACK_CHECK
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif
#endif

        ldw   r8,  36(sp)
  2000c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  2000c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  2000cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  2000d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  2000d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  2000d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  2000dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  2000e0:	dbc01017 	ldw	r15,64(sp)
#endif

        ldw   sp,  76(sp)

#else
        addi  sp, sp, 76
  2000e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  2000e8:	ef80083a 	eret

002000ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  2000ec:	deffff04 	addi	sp,sp,-4
  2000f0:	dfc00015 	stw	ra,0(sp)
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  2000f4:	0009313a 	rdctl	r4,ipending
  2000f8:	00c00044 	movi	r3,1
  2000fc:	01400834 	movhi	r5,32
  200100:	2942d204 	addi	r5,r5,2888
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
  200104:	20c4703a 	and	r2,r4,r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
  200108:	18c7883a 	add	r3,r3,r3
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
  20010c:	10000726 	beq	r2,zero,20012c <alt_irq_handler+0x40>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
  200110:	29000117 	ldw	r4,4(r5)
  200114:	28800017 	ldw	r2,0(r5)
  200118:	103ee83a 	callr	r2
  20011c:	0005313a 	rdctl	r2,ipending

    } while (1);

    active = alt_irq_pending ();
    
  } while (active);
  200120:	10000426 	beq	r2,zero,200134 <alt_irq_handler+0x48>
  200124:	1009883a 	mov	r4,r2
  200128:	003ff306 	br	2000f8 <alt_irq_handler+0xc>
  20012c:	29400204 	addi	r5,r5,8
  200130:	003ff406 	br	200104 <alt_irq_handler+0x18>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
  200134:	dfc00017 	ldw	ra,0(sp)
  200138:	dec00104 	addi	sp,sp,4
  20013c:	f800283a 	ret

Disassembly of section .text:

00200140 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
  200140:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
  200144:	10000033 	initd	0(r2)
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
  200148:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
  20014c:	00bffd16 	blt	zero,r2,200144 <_start+0x4>
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
  200150:	06c00834 	movhi	sp,32
    ori sp, sp, %lo(__alt_stack_pointer)
  200154:	dee00014 	ori	sp,sp,32768

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
  200158:	06800834 	movhi	gp,32
    ori gp, gp, %lo(_gp)
  20015c:	d6a2ca14 	ori	gp,gp,35624
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
  200160:	00800834 	movhi	r2,32
    ori r2, r2, %lo(__bss_start)
  200164:	1082ce14 	ori	r2,r2,2872

    movhi r3, %hi(__bss_end)
  200168:	00c00834 	movhi	r3,32
    ori r3, r3, %lo(__bss_end)
  20016c:	18c31214 	ori	r3,r3,3144

    beq r2, r3, 1f
  200170:	10c00326 	beq	r2,r3,200180 <_start+0x40>

0:
    stw zero, (r2)
  200174:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
  200178:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
  20017c:	10fffd36 	bltu	r2,r3,200174 <_start+0x34>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
  200180:	02007200 	call	200720 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
  200184:	020078c0 	call	20078c <alt_main>

00200188 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
  200188:	003fff06 	br	200188 <alt_after_alt_main>

0020018c <int_ack>:
	alt_printf("Status: %x\n", status);
	int _return = IORD_32DIRECT(0x000c, 0);
	alt_printf("return: %x\n", _return);
}

void int_ack(){
  20018c:	deffff04 	addi	sp,sp,-4
	//SEND
	IOWR_32DIRECT(0x0000, 0, 0x0000000a);
  200190:	00c00284 	movi	r3,10
  200194:	0005883a 	mov	r2,zero
	alt_printf("Status: %x\n", status);
	int _return = IORD_32DIRECT(0x000c, 0);
	alt_printf("return: %x\n", _return);
}

void int_ack(){
  200198:	dfc00015 	stw	ra,0(sp)
	//SEND
	IOWR_32DIRECT(0x0000, 0, 0x0000000a);
  20019c:	10c00035 	stwio	r3,0(r2)
	IOWR_32DIRECT(0x0004, 0, 0);
  2001a0:	00800104 	movi	r2,4
  2001a4:	10000035 	stwio	zero,0(r2)
	IOWR_32DIRECT(0x0008, 0, 0);
  2001a8:	00800204 	movi	r2,8
  2001ac:	10000035 	stwio	zero,0(r2)
  2001b0:	00c00404 	movi	r3,16

	//READ
	int status, done;
	do {
		status = IORD_32DIRECT(0x0010,0);
  2001b4:	19400037 	ldwio	r5,0(r3)
		done = status & 0x00000008;
	} while(done == 0);
  2001b8:	2880020c 	andi	r2,r5,8
  2001bc:	103ffd26 	beq	r2,zero,2001b4 <int_ack+0x28>


	alt_printf("Status: %x\n", status);
  2001c0:	01000834 	movhi	r4,32
  2001c4:	21029804 	addi	r4,r4,2656
  2001c8:	02007b80 	call	2007b8 <alt_printf>
	int _return = IORD_32DIRECT(0x000c, 0);
  2001cc:	00800304 	movi	r2,12
  2001d0:	11400037 	ldwio	r5,0(r2)
	alt_printf("return: %x\n", _return);
  2001d4:	01000834 	movhi	r4,32
  2001d8:	21029b04 	addi	r4,r4,2668
}
  2001dc:	dfc00017 	ldw	ra,0(sp)
  2001e0:	dec00104 	addi	sp,sp,4
	} while(done == 0);


	alt_printf("Status: %x\n", status);
	int _return = IORD_32DIRECT(0x000c, 0);
	alt_printf("return: %x\n", _return);
  2001e4:	02007b81 	jmpi	2007b8 <alt_printf>

002001e8 <irqhandler>:
}

static void irqhandler (void *context, alt_u32 id)
{
  2001e8:	deffff04 	addi	sp,sp,-4
  2001ec:	dfc00015 	stw	ra,0(sp)
	int_ack();
  2001f0:	020018c0 	call	20018c <int_ack>
	alt_printf ("=================\ninterrupt occurred\n");
  2001f4:	01000834 	movhi	r4,32
  2001f8:	21029e04 	addi	r4,r4,2680
}
  2001fc:	dfc00017 	ldw	ra,0(sp)
  200200:	dec00104 	addi	sp,sp,4
}

static void irqhandler (void *context, alt_u32 id)
{
	int_ack();
	alt_printf ("=================\ninterrupt occurred\n");
  200204:	02007b81 	jmpi	2007b8 <alt_printf>

00200208 <size>:
	alt_printf("Status: %x\n", status);
	int _return = IORD_32DIRECT(0x000c, 0);
	alt_printf("return: %x\n", _return);
}

void size(){
  200208:	deffff04 	addi	sp,sp,-4
	//SEND
	IOWR_32DIRECT(0x0000, 0, 0x0000000d);
  20020c:	00c00344 	movi	r3,13
  200210:	0005883a 	mov	r2,zero
	alt_printf("Status: %x\n", status);
	int _return = IORD_32DIRECT(0x000c, 0);
	alt_printf("return: %x\n", _return);
}

void size(){
  200214:	dfc00015 	stw	ra,0(sp)
	//SEND
	IOWR_32DIRECT(0x0000, 0, 0x0000000d);
  200218:	10c00035 	stwio	r3,0(r2)
	IOWR_32DIRECT(0x0004, 0, 0);
  20021c:	00800104 	movi	r2,4
  200220:	10000035 	stwio	zero,0(r2)
	IOWR_32DIRECT(0x0008, 0, 0);
  200224:	00800204 	movi	r2,8
  200228:	10000035 	stwio	zero,0(r2)
  20022c:	00c00404 	movi	r3,16

	//READ
	int status, done;
	do {
		status = IORD_32DIRECT(0x0010,0);
  200230:	19400037 	ldwio	r5,0(r3)
		done = status & 0x00000008;
	} while(done == 0);
  200234:	2880020c 	andi	r2,r5,8
  200238:	103ffd26 	beq	r2,zero,200230 <size+0x28>


	alt_printf("Status: %x\n", status);
  20023c:	01000834 	movhi	r4,32
  200240:	21029804 	addi	r4,r4,2656
  200244:	02007b80 	call	2007b8 <alt_printf>
	int _return = IORD_32DIRECT(0x000c, 0);
  200248:	00800304 	movi	r2,12
  20024c:	11400037 	ldwio	r5,0(r2)
	alt_printf("return: %x\n", _return);
  200250:	01000834 	movhi	r4,32
  200254:	21029b04 	addi	r4,r4,2668
}
  200258:	dfc00017 	ldw	ra,0(sp)
  20025c:	dec00104 	addi	sp,sp,4
	} while(done == 0);


	alt_printf("Status: %x\n", status);
	int _return = IORD_32DIRECT(0x000c, 0);
	alt_printf("return: %x\n", _return);
  200260:	02007b81 	jmpi	2007b8 <alt_printf>

00200264 <insert>:
	alt_printf("Status: %x\n", status);
	int _return = IORD_32DIRECT(0x000c, 0);
	alt_printf("return: %x\n", _return);
}

void insert(int priority, int parameter){
  200264:	deffff04 	addi	sp,sp,-4
	//SEND
	IOWR_32DIRECT(0x0000, 0, 0x00000003);
  200268:	00c000c4 	movi	r3,3
  20026c:	0005883a 	mov	r2,zero
	alt_printf("Status: %x\n", status);
	int _return = IORD_32DIRECT(0x000c, 0);
	alt_printf("return: %x\n", _return);
}

void insert(int priority, int parameter){
  200270:	dfc00015 	stw	ra,0(sp)
	//SEND
	IOWR_32DIRECT(0x0000, 0, 0x00000003);
  200274:	10c00035 	stwio	r3,0(r2)
	IOWR_32DIRECT(0x0004, 0, priority);
  200278:	00800104 	movi	r2,4
  20027c:	11000035 	stwio	r4,0(r2)
	IOWR_32DIRECT(0x0008, 0, parameter);
  200280:	00800204 	movi	r2,8
  200284:	11400035 	stwio	r5,0(r2)
  200288:	00c00404 	movi	r3,16

	//READ
	int status, done;
	do {
		status = IORD_32DIRECT(0x0010,0);
  20028c:	19400037 	ldwio	r5,0(r3)
		done = status & 0x00000008;
	} while(done == 0);
  200290:	2880020c 	andi	r2,r5,8
  200294:	103ffd26 	beq	r2,zero,20028c <insert+0x28>

	alt_printf("Status: %x\n", status);
  200298:	01000834 	movhi	r4,32
  20029c:	21029804 	addi	r4,r4,2656
  2002a0:	02007b80 	call	2007b8 <alt_printf>
	int _return = IORD_32DIRECT(0x000c, 0);
  2002a4:	00800304 	movi	r2,12
  2002a8:	11400037 	ldwio	r5,0(r2)
	alt_printf("return: %x\n", _return);
  2002ac:	01000834 	movhi	r4,32
  2002b0:	21029b04 	addi	r4,r4,2668
}
  2002b4:	dfc00017 	ldw	ra,0(sp)
  2002b8:	dec00104 	addi	sp,sp,4
		done = status & 0x00000008;
	} while(done == 0);

	alt_printf("Status: %x\n", status);
	int _return = IORD_32DIRECT(0x000c, 0);
	alt_printf("return: %x\n", _return);
  2002bc:	02007b81 	jmpi	2007b8 <alt_printf>

002002c0 <create>:
	alt_printf("Status: %x\n", status);
	int _return = IORD_32DIRECT(0x000c, 0);
	alt_printf("return: %x\n", _return);
}

void create(int priority, int parameter){
  2002c0:	deffff04 	addi	sp,sp,-4
	//SEND
	IOWR_32DIRECT(0x0000, 0, 0x00000001);
  2002c4:	00c00044 	movi	r3,1
  2002c8:	0005883a 	mov	r2,zero
	alt_printf("Status: %x\n", status);
	int _return = IORD_32DIRECT(0x000c, 0);
	alt_printf("return: %x\n", _return);
}

void create(int priority, int parameter){
  2002cc:	dfc00015 	stw	ra,0(sp)
	//SEND
	IOWR_32DIRECT(0x0000, 0, 0x00000001);
  2002d0:	10c00035 	stwio	r3,0(r2)
	IOWR_32DIRECT(0x0004, 0, priority);
  2002d4:	00800104 	movi	r2,4
  2002d8:	11000035 	stwio	r4,0(r2)
	IOWR_32DIRECT(0x0008, 0, parameter);
  2002dc:	00800204 	movi	r2,8
  2002e0:	11400035 	stwio	r5,0(r2)
  2002e4:	00c00404 	movi	r3,16

	//READ
	int status, done;
	do {
		status = IORD_32DIRECT(0x0010,0);
  2002e8:	19400037 	ldwio	r5,0(r3)
		done = status & 0x00000008;
	} while(done == 0);
  2002ec:	2880020c 	andi	r2,r5,8
  2002f0:	103ffd26 	beq	r2,zero,2002e8 <create+0x28>

	alt_printf("Status: %x\n", status);
  2002f4:	01000834 	movhi	r4,32
  2002f8:	21029804 	addi	r4,r4,2656
  2002fc:	02007b80 	call	2007b8 <alt_printf>
	int _return = IORD_32DIRECT(0x000c, 0);
  200300:	00800304 	movi	r2,12
  200304:	11400037 	ldwio	r5,0(r2)
	alt_printf("return: %x\n", _return);
  200308:	01000834 	movhi	r4,32
  20030c:	21029b04 	addi	r4,r4,2668
}
  200310:	dfc00017 	ldw	ra,0(sp)
  200314:	dec00104 	addi	sp,sp,4
		done = status & 0x00000008;
	} while(done == 0);

	alt_printf("Status: %x\n", status);
	int _return = IORD_32DIRECT(0x000c, 0);
	alt_printf("return: %x\n", _return);
  200318:	02007b81 	jmpi	2007b8 <alt_printf>

0020031c <disable>:
	alt_printf("Status: %x\n", status);
	int _return = IORD_32DIRECT(0x000c, 0);
	alt_printf("return: %x\n", _return);
}

void disable(){
  20031c:	deffff04 	addi	sp,sp,-4
	//SEND
	IOWR_32DIRECT(0x0000, 0, 0x00000009);
  200320:	00c00244 	movi	r3,9
  200324:	0005883a 	mov	r2,zero
	alt_printf("Status: %x\n", status);
	int _return = IORD_32DIRECT(0x000c, 0);
	alt_printf("return: %x\n", _return);
}

void disable(){
  200328:	dfc00015 	stw	ra,0(sp)
	//SEND
	IOWR_32DIRECT(0x0000, 0, 0x00000009);
  20032c:	10c00035 	stwio	r3,0(r2)
	IOWR_32DIRECT(0x0004, 0, 0);
  200330:	00800104 	movi	r2,4
  200334:	10000035 	stwio	zero,0(r2)
	IOWR_32DIRECT(0x0008, 0, 0);
  200338:	00800204 	movi	r2,8
  20033c:	10000035 	stwio	zero,0(r2)
  200340:	00c00404 	movi	r3,16

	//READ
	int status, done;
	do {
		status = IORD_32DIRECT(0x0010,0);
  200344:	19400037 	ldwio	r5,0(r3)
		done = status & 0x00000008;
	} while(done == 0);
  200348:	2880020c 	andi	r2,r5,8
  20034c:	103ffd26 	beq	r2,zero,200344 <disable+0x28>

	alt_printf("Status: %x\n", status);
  200350:	01000834 	movhi	r4,32
  200354:	21029804 	addi	r4,r4,2656
  200358:	02007b80 	call	2007b8 <alt_printf>
	int _return = IORD_32DIRECT(0x000c, 0);
  20035c:	00800304 	movi	r2,12
  200360:	11400037 	ldwio	r5,0(r2)
	alt_printf("return: %x\n", _return);
  200364:	01000834 	movhi	r4,32
  200368:	21029b04 	addi	r4,r4,2668
}
  20036c:	dfc00017 	ldw	ra,0(sp)
  200370:	dec00104 	addi	sp,sp,4
		done = status & 0x00000008;
	} while(done == 0);

	alt_printf("Status: %x\n", status);
	int _return = IORD_32DIRECT(0x000c, 0);
	alt_printf("return: %x\n", _return);
  200374:	02007b81 	jmpi	2007b8 <alt_printf>

00200378 <enable>:
	alt_printf("Status: %x\n", status);
	int _return = IORD_32DIRECT(0x000c, 0);
	alt_printf("return: %x\n", _return);
}

void enable(){
  200378:	deffff04 	addi	sp,sp,-4
	//SEND
	IOWR_32DIRECT(0x0000, 0, 0x00000008);
  20037c:	00800204 	movi	r2,8
  200380:	0007883a 	mov	r3,zero
	alt_printf("Status: %x\n", status);
	int _return = IORD_32DIRECT(0x000c, 0);
	alt_printf("return: %x\n", _return);
}

void enable(){
  200384:	dfc00015 	stw	ra,0(sp)
	//SEND
	IOWR_32DIRECT(0x0000, 0, 0x00000008);
  200388:	18800035 	stwio	r2,0(r3)
	IOWR_32DIRECT(0x0004, 0, 0);
  20038c:	00c00104 	movi	r3,4
  200390:	18000035 	stwio	zero,0(r3)
	IOWR_32DIRECT(0x0008, 0, 0);
  200394:	10000035 	stwio	zero,0(r2)
  200398:	00c00404 	movi	r3,16

	//READ
	int status, done;
	do {
		status = IORD_32DIRECT(0x0010,0);
  20039c:	19400037 	ldwio	r5,0(r3)
		done = status & 0x00000008;
	} while(done == 0);
  2003a0:	2880020c 	andi	r2,r5,8
  2003a4:	103ffd26 	beq	r2,zero,20039c <enable+0x24>

	alt_printf("Status: %x\n", status);
  2003a8:	01000834 	movhi	r4,32
  2003ac:	21029804 	addi	r4,r4,2656
  2003b0:	02007b80 	call	2007b8 <alt_printf>
	int _return = IORD_32DIRECT(0x000c, 0);
  2003b4:	00800304 	movi	r2,12
  2003b8:	11400037 	ldwio	r5,0(r2)
	alt_printf("return: %x\n", _return);
  2003bc:	01000834 	movhi	r4,32
  2003c0:	21029b04 	addi	r4,r4,2668
}
  2003c4:	dfc00017 	ldw	ra,0(sp)
  2003c8:	dec00104 	addi	sp,sp,4
		done = status & 0x00000008;
	} while(done == 0);

	alt_printf("Status: %x\n", status);
	int _return = IORD_32DIRECT(0x000c, 0);
	alt_printf("return: %x\n", _return);
  2003cc:	02007b81 	jmpi	2007b8 <alt_printf>

002003d0 <update>:
	alt_printf("Status: %x\n", status);
	int _return = IORD_32DIRECT(0x000c, 0);
	alt_printf("return: %x\n", _return);
}

void update(int parameter){
  2003d0:	deffff04 	addi	sp,sp,-4
	//SEND
	IOWR_32DIRECT(0x0000, 0, 0x00000006);
  2003d4:	00c00184 	movi	r3,6
  2003d8:	0005883a 	mov	r2,zero
	alt_printf("Status: %x\n", status);
	int _return = IORD_32DIRECT(0x000c, 0);
	alt_printf("return: %x\n", _return);
}

void update(int parameter){
  2003dc:	dfc00015 	stw	ra,0(sp)
	//SEND
	IOWR_32DIRECT(0x0000, 0, 0x00000006);
  2003e0:	10c00035 	stwio	r3,0(r2)
	IOWR_32DIRECT(0x0004, 0, 0);
  2003e4:	00800104 	movi	r2,4
  2003e8:	10000035 	stwio	zero,0(r2)
	IOWR_32DIRECT(0x0008, 0, parameter);
  2003ec:	00800204 	movi	r2,8
  2003f0:	11000035 	stwio	r4,0(r2)
  2003f4:	00c00404 	movi	r3,16

	//READ
	int status, done;
	do {
		status = IORD_32DIRECT(0x0010,0);
  2003f8:	19400037 	ldwio	r5,0(r3)
		done = status & 0x00000008;
	} while(done == 0);
  2003fc:	2880020c 	andi	r2,r5,8
  200400:	103ffd26 	beq	r2,zero,2003f8 <update+0x28>

	alt_printf("Status: %x\n", status);
  200404:	01000834 	movhi	r4,32
  200408:	21029804 	addi	r4,r4,2656
  20040c:	02007b80 	call	2007b8 <alt_printf>
	int _return = IORD_32DIRECT(0x000c, 0);
  200410:	00800304 	movi	r2,12
  200414:	11400037 	ldwio	r5,0(r2)
	alt_printf("return: %x\n", _return);
  200418:	01000834 	movhi	r4,32
  20041c:	21029b04 	addi	r4,r4,2668
}
  200420:	dfc00017 	ldw	ra,0(sp)
  200424:	dec00104 	addi	sp,sp,4
		done = status & 0x00000008;
	} while(done == 0);

	alt_printf("Status: %x\n", status);
	int _return = IORD_32DIRECT(0x000c, 0);
	alt_printf("return: %x\n", _return);
  200428:	02007b81 	jmpi	2007b8 <alt_printf>

0020042c <reset>:
#include "system.h"
#include "sys/alt_irq.h"
#include "sys/alt_irq_entry.h"
#include "HAL/inc/io.h"

void reset(){
  20042c:	deffff04 	addi	sp,sp,-4
	//SEND
	IOWR_32DIRECT(0x0000, 0, 0x0000000e);
  200430:	00c00384 	movi	r3,14
  200434:	0005883a 	mov	r2,zero
#include "system.h"
#include "sys/alt_irq.h"
#include "sys/alt_irq_entry.h"
#include "HAL/inc/io.h"

void reset(){
  200438:	dfc00015 	stw	ra,0(sp)
	//SEND
	IOWR_32DIRECT(0x0000, 0, 0x0000000e);
  20043c:	10c00035 	stwio	r3,0(r2)
	IOWR_32DIRECT(0x0004, 0, 0);
  200440:	00800104 	movi	r2,4
  200444:	10000035 	stwio	zero,0(r2)
	IOWR_32DIRECT(0x0008, 0, 0);
  200448:	00800204 	movi	r2,8
  20044c:	10000035 	stwio	zero,0(r2)
  200450:	00c00404 	movi	r3,16

	//READ
	int status, done;
	do {
		status = IORD_32DIRECT(0x0010,0);
  200454:	19400037 	ldwio	r5,0(r3)
		done = status & 0x00000008;
	} while(done == 0);
  200458:	2880020c 	andi	r2,r5,8
  20045c:	103ffd26 	beq	r2,zero,200454 <reset+0x28>

	alt_printf("Status: %x\n", status);
  200460:	01000834 	movhi	r4,32
  200464:	21029804 	addi	r4,r4,2656
  200468:	02007b80 	call	2007b8 <alt_printf>
	int _return = IORD_32DIRECT(0x000c, 0);
  20046c:	00800304 	movi	r2,12
  200470:	11400037 	ldwio	r5,0(r2)
	alt_printf("return: %x\n", _return);
  200474:	01000834 	movhi	r4,32
  200478:	21029b04 	addi	r4,r4,2668
}
  20047c:	dfc00017 	ldw	ra,0(sp)
  200480:	dec00104 	addi	sp,sp,4
		done = status & 0x00000008;
	} while(done == 0);

	alt_printf("Status: %x\n", status);
	int _return = IORD_32DIRECT(0x000c, 0);
	alt_printf("return: %x\n", _return);
  200484:	02007b81 	jmpi	2007b8 <alt_printf>

00200488 <main>:
	int_ack();
	alt_printf ("=================\ninterrupt occurred\n");
}

int main()
{
  200488:	deffff04 	addi	sp,sp,-4
	alt_irq_register( SCHEDULER_0_IRQ, 0, (void*)irqhandler);
  20048c:	01800834 	movhi	r6,32
  200490:	31807a04 	addi	r6,r6,488
  200494:	000b883a 	mov	r5,zero
  200498:	01000044 	movi	r4,1
	int_ack();
	alt_printf ("=================\ninterrupt occurred\n");
}

int main()
{
  20049c:	dfc00015 	stw	ra,0(sp)
	alt_irq_register( SCHEDULER_0_IRQ, 0, (void*)irqhandler);
  2004a0:	02006600 	call	200660 <alt_irq_register>
	alt_putstr("========================\n");
  2004a4:	01000834 	movhi	r4,32
  2004a8:	2102a804 	addi	r4,r4,2720
  2004ac:	020094c0 	call	20094c <alt_putstr>


	alt_printf("\n1\n");
  2004b0:	01000834 	movhi	r4,32
  2004b4:	2102af04 	addi	r4,r4,2748
  2004b8:	02007b80 	call	2007b8 <alt_printf>
	enable();
  2004bc:	02003780 	call	200378 <enable>

	alt_printf("\n2\n");
  2004c0:	01000834 	movhi	r4,32
  2004c4:	2102b004 	addi	r4,r4,2752
  2004c8:	02007b80 	call	2007b8 <alt_printf>
	disable();
  2004cc:	020031c0 	call	20031c <disable>

	alt_printf("\n3\n");
  2004d0:	01000834 	movhi	r4,32
  2004d4:	2102b104 	addi	r4,r4,2756
  2004d8:	02007b80 	call	2007b8 <alt_printf>
	enable();
  2004dc:	02003780 	call	200378 <enable>

	alt_printf("\nSIZE\n");
  2004e0:	01000834 	movhi	r4,32
  2004e4:	2102b204 	addi	r4,r4,2760
  2004e8:	02007b80 	call	2007b8 <alt_printf>
	size();
  2004ec:	02002080 	call	200208 <size>

	alt_printf("\n6\n");
  2004f0:	01000834 	movhi	r4,32
  2004f4:	2102b404 	addi	r4,r4,2768
  2004f8:	02007b80 	call	2007b8 <alt_printf>
	create(1, 1);
  2004fc:	01000044 	movi	r4,1
  200500:	200b883a 	mov	r5,r4
  200504:	02002c00 	call	2002c0 <create>

	alt_printf("\n7\n");
  200508:	01000834 	movhi	r4,32
  20050c:	2102b504 	addi	r4,r4,2772
  200510:	02007b80 	call	2007b8 <alt_printf>
	create(2, 2);
  200514:	01000084 	movi	r4,2
  200518:	200b883a 	mov	r5,r4
  20051c:	02002c00 	call	2002c0 <create>

	alt_printf("\n8\n");
  200520:	01000834 	movhi	r4,32
  200524:	2102b604 	addi	r4,r4,2776
  200528:	02007b80 	call	2007b8 <alt_printf>
	create(1, 3);
  20052c:	014000c4 	movi	r5,3
  200530:	01000044 	movi	r4,1
  200534:	02002c00 	call	2002c0 <create>

	alt_printf("\n9\n");
  200538:	01000834 	movhi	r4,32
  20053c:	2102b704 	addi	r4,r4,2780
  200540:	02007b80 	call	2007b8 <alt_printf>
	create(1, 4);
  200544:	01400104 	movi	r5,4
  200548:	01000044 	movi	r4,1
  20054c:	02002c00 	call	2002c0 <create>

	alt_printf("\nSIZE\n");
  200550:	01000834 	movhi	r4,32
  200554:	2102b204 	addi	r4,r4,2760
  200558:	02007b80 	call	2007b8 <alt_printf>
	size();
  20055c:	02002080 	call	200208 <size>

	alt_printf("\n10\n");
  200560:	01000834 	movhi	r4,32
  200564:	2102b804 	addi	r4,r4,2784
  200568:	02007b80 	call	2007b8 <alt_printf>
	create(1, 5);
  20056c:	01400144 	movi	r5,5
  200570:	01000044 	movi	r4,1
  200574:	02002c00 	call	2002c0 <create>

	alt_printf("\n11\n");
  200578:	01000834 	movhi	r4,32
  20057c:	2102ba04 	addi	r4,r4,2792
  200580:	02007b80 	call	2007b8 <alt_printf>
	create(1, 6);
  200584:	01400184 	movi	r5,6
  200588:	01000044 	movi	r4,1
  20058c:	02002c00 	call	2002c0 <create>

	alt_printf("\nSIZE\n");
  200590:	01000834 	movhi	r4,32
  200594:	2102b204 	addi	r4,r4,2760
  200598:	02007b80 	call	2007b8 <alt_printf>
	size();
  20059c:	02002080 	call	200208 <size>

	alt_printf("\n12\n");
  2005a0:	01000834 	movhi	r4,32
  2005a4:	2102bc04 	addi	r4,r4,2800
  2005a8:	02007b80 	call	2007b8 <alt_printf>
	insert(2, 2);
  2005ac:	01000084 	movi	r4,2
  2005b0:	200b883a 	mov	r5,r4
  2005b4:	02002640 	call	200264 <insert>

	alt_printf("\n0\n");
  2005b8:	01000834 	movhi	r4,32
  2005bc:	2102be04 	addi	r4,r4,2808
  2005c0:	02007b80 	call	2007b8 <alt_printf>
	reset();
  2005c4:	020042c0 	call	20042c <reset>

	alt_printf("\nUPDATE\n");
  2005c8:	01000834 	movhi	r4,32
  2005cc:	2102bf04 	addi	r4,r4,2812
  2005d0:	02007b80 	call	2007b8 <alt_printf>
	update(2);
  2005d4:	01000084 	movi	r4,2
  2005d8:	02003d00 	call	2003d0 <update>

	alt_printf("\nSIZE\n");
  2005dc:	01000834 	movhi	r4,32
  2005e0:	2102b204 	addi	r4,r4,2760
  2005e4:	02007b80 	call	2007b8 <alt_printf>
	size();
  2005e8:	02002080 	call	200208 <size>

	alt_printf("\n13\n");
  2005ec:	01000834 	movhi	r4,32
  2005f0:	2102c204 	addi	r4,r4,2824
  2005f4:	02007b80 	call	2007b8 <alt_printf>
	create(1, 7);
  2005f8:	014001c4 	movi	r5,7
  2005fc:	01000044 	movi	r4,1
  200600:	02002c00 	call	2002c0 <create>

	alt_printf("\n14\n");
  200604:	01000834 	movhi	r4,32
  200608:	2102c404 	addi	r4,r4,2832
  20060c:	02007b80 	call	2007b8 <alt_printf>
	create(1, 8);
  200610:	01400204 	movi	r5,8
  200614:	01000044 	movi	r4,1
  200618:	02002c00 	call	2002c0 <create>

	alt_printf("\n15\n");
  20061c:	01000834 	movhi	r4,32
  200620:	2102c604 	addi	r4,r4,2840
  200624:	02007b80 	call	2007b8 <alt_printf>
	create(1, 9);
  200628:	01400244 	movi	r5,9
  20062c:	01000044 	movi	r4,1
  200630:	02002c00 	call	2002c0 <create>

	alt_printf("\n16\n");
  200634:	01000834 	movhi	r4,32
  200638:	2102c804 	addi	r4,r4,2848
  20063c:	02007b80 	call	2007b8 <alt_printf>
	insert(1, 1);
  200640:	01000044 	movi	r4,1
  200644:	200b883a 	mov	r5,r4
  200648:	02002640 	call	200264 <insert>

	alt_printf("\nSIZE\n");
  20064c:	01000834 	movhi	r4,32
  200650:	2102b204 	addi	r4,r4,2760
  200654:	02007b80 	call	2007b8 <alt_printf>
	size();
  200658:	02002080 	call	200208 <size>
  20065c:	003fff06 	br	20065c <main+0x1d4>

00200660 <alt_irq_register>:
                      alt_isr_func handler)
{
  int rc = -EINVAL;  
  alt_irq_context status;

  if (id < ALT_NIRQ)
  200660:	008007c4 	movi	r2,31
 */
 
int alt_irq_register (alt_u32 id, 
                      void* context, 
                      alt_isr_func handler)
{
  200664:	200f883a 	mov	r7,r4
  int rc = -EINVAL;  
  alt_irq_context status;

  if (id < ALT_NIRQ)
  200668:	00fffa84 	movi	r3,-22
  20066c:	11002236 	bltu	r2,r4,2006f8 <alt_irq_register+0x98>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  200670:	0015303a 	rdctl	r10,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  200674:	027fff84 	movi	r9,-2
  200678:	5244703a 	and	r2,r10,r9
  20067c:	1001703a 	wrctl	status,r2
     * state.
     */

    status = alt_irq_disable_all ();

    alt_irq[id].handler = handler;
  200680:	200490fa 	slli	r2,r4,3
  200684:	00c00834 	movhi	r3,32
  200688:	18c2d204 	addi	r3,r3,2888
  20068c:	02000834 	movhi	r8,32
  200690:	4202ce04 	addi	r8,r8,2872
  200694:	10c5883a 	add	r2,r2,r3
    alt_irq[id].context = context;
  200698:	11400115 	stw	r5,4(r2)
     * state.
     */

    status = alt_irq_disable_all ();

    alt_irq[id].handler = handler;
  20069c:	11800015 	stw	r6,0(r2)
    alt_irq[id].context = context;

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
  2006a0:	30000826 	beq	r6,zero,2006c4 <alt_irq_register+0x64>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  2006a4:	0009303a 	rdctl	r4,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  2006a8:	2244703a 	and	r2,r4,r9
  2006ac:	1001703a 	wrctl	status,r2
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();

  alt_irq_active |= (1 << id);
  2006b0:	00c00044 	movi	r3,1
  2006b4:	19c6983a 	sll	r3,r3,r7
  2006b8:	40800017 	ldw	r2,0(r8)
  2006bc:	10c4b03a 	or	r2,r2,r3
  2006c0:	00000706 	br	2006e0 <alt_irq_register+0x80>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  2006c4:	0009303a 	rdctl	r4,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  2006c8:	2244703a 	and	r2,r4,r9
  2006cc:	1001703a 	wrctl	status,r2
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();

  alt_irq_active &= ~(1 << id);
  2006d0:	00ffff84 	movi	r3,-2
  2006d4:	19c6183a 	rol	r3,r3,r7
  2006d8:	40800017 	ldw	r2,0(r8)
  2006dc:	10c4703a 	and	r2,r2,r3
  2006e0:	40800015 	stw	r2,0(r8)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  2006e4:	40800017 	ldw	r2,0(r8)
  2006e8:	100170fa 	wrctl	ienable,r2
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  2006ec:	2001703a 	wrctl	status,r4
  2006f0:	5001703a 	wrctl	status,r10
  2006f4:	0007883a 	mov	r3,zero

    alt_irq_enable_all(status);
  }
  return rc; 
}
  2006f8:	1805883a 	mov	r2,r3
  2006fc:	f800283a 	ret

00200700 <alt_load_section>:

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  200700:	2900051e 	bne	r5,r4,200718 <alt_load_section+0x18>
  200704:	f800283a 	ret
  {
    while( to != end )
    {
      *to++ = *from++;
  200708:	20800017 	ldw	r2,0(r4)
  20070c:	21000104 	addi	r4,r4,4
  200710:	28800015 	stw	r2,0(r5)
  200714:	29400104 	addi	r5,r5,4
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
  200718:	29bffb1e 	bne	r5,r6,200708 <alt_load_section+0x8>
  20071c:	f800283a 	ret

00200720 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
  200720:	deffff04 	addi	sp,sp,-4
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
  200724:	01000834 	movhi	r4,32
  200728:	2102cc04 	addi	r4,r4,2864
  20072c:	01400834 	movhi	r5,32
  200730:	2942ca04 	addi	r5,r5,2856
  200734:	01800834 	movhi	r6,32
  200738:	3182cc04 	addi	r6,r6,2864
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
  20073c:	dfc00015 	stw	ra,0(sp)
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
  200740:	02007000 	call	200700 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
  200744:	01000834 	movhi	r4,32
  200748:	21000804 	addi	r4,r4,32
  20074c:	01400834 	movhi	r5,32
  200750:	29400804 	addi	r5,r5,32
  200754:	01800834 	movhi	r6,32
  200758:	31805004 	addi	r6,r6,320
  20075c:	02007000 	call	200700 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
  200760:	01000834 	movhi	r4,32
  200764:	21029804 	addi	r4,r4,2656
  200768:	01400834 	movhi	r5,32
  20076c:	29429804 	addi	r5,r5,2656
  200770:	01800834 	movhi	r6,32
  200774:	3182ca04 	addi	r6,r6,2856
  200778:	02007000 	call	200700 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  20077c:	02009dc0 	call	2009dc <alt_dcache_flush_all>
  alt_icache_flush_all();
}
  200780:	dfc00017 	ldw	ra,0(sp)
  200784:	dec00104 	addi	sp,sp,4
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  alt_icache_flush_all();
  200788:	02009f41 	jmpi	2009f4 <alt_icache_flush_all>

0020078c <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
  20078c:	deffff04 	addi	sp,sp,-4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
  200790:	0009883a 	mov	r4,zero
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
  200794:	dfc00015 	stw	ra,0(sp)
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
  200798:	02009880 	call	200988 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
  20079c:	02009840 	call	200984 <alt_sys_init>
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
  2007a0:	d1200517 	ldw	r4,-32748(gp)
  2007a4:	d1600617 	ldw	r5,-32744(gp)
  2007a8:	d1a00717 	ldw	r6,-32740(gp)
  close(STDOUT_FILENO);
  exit (result);
#endif

  ALT_LOG_PRINT_BOOT("[alt_main.c] After main - we should not be here?.\r\n");
}
  2007ac:	dfc00017 	ldw	ra,0(sp)
  2007b0:	dec00104 	addi	sp,sp,4
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
  2007b4:	02004881 	jmpi	200488 <main>

002007b8 <alt_printf>:
/* 
 * ALT printf function 
 */
void 
alt_printf(const char* fmt, ... )
{
  2007b8:	defff804 	addi	sp,sp,-32
  2007bc:	dfc00415 	stw	ra,16(sp)
  2007c0:	dc800315 	stw	r18,12(sp)
  2007c4:	dc400215 	stw	r17,8(sp)
  2007c8:	dc000115 	stw	r16,4(sp)
  2007cc:	d9400515 	stw	r5,20(sp)
  2007d0:	d9800615 	stw	r6,24(sp)
  2007d4:	d9c00715 	stw	r7,28(sp)
	va_list args;
	va_start(args, fmt);
  2007d8:	d8800504 	addi	r2,sp,20
  2007dc:	2025883a 	mov	r18,r4
  2007e0:	d8800015 	stw	r2,0(sp)
  2007e4:	00003d06 	br	2008dc <alt_printf+0x124>
    w = fmt;
    while ((c = *w++) != 0)
    {
        /* If not a format escape character, just print  */
        /* character.  Otherwise, process format string. */
        if (c != '%')
  2007e8:	00800944 	movi	r2,37
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    while ((c = *w++) != 0)
  2007ec:	94800044 	addi	r18,r18,1
    {
        /* If not a format escape character, just print  */
        /* character.  Otherwise, process format string. */
        if (c != '%')
  2007f0:	18800226 	beq	r3,r2,2007fc <alt_printf+0x44>
        {
            alt_putchar(c);
  2007f4:	1809883a 	mov	r4,r3
  2007f8:	00000a06 	br	200824 <alt_printf+0x6c>
        }
        else
        {
            /* Get format character.  If none     */
            /* available, processing is complete. */
            if ((c = *w++) != 0)
  2007fc:	91000007 	ldb	r4,0(r18)
  200800:	94800044 	addi	r18,r18,1
  200804:	20003726 	beq	r4,zero,2008e4 <alt_printf+0x12c>
            {
                if (c == '%')
  200808:	20c00626 	beq	r4,r3,200824 <alt_printf+0x6c>
                {
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
                } 
                else if (c == 'c')
  20080c:	008018c4 	movi	r2,99
  200810:	2080061e 	bne	r4,r2,20082c <alt_printf+0x74>
                {
                    int v = va_arg(args, int);
  200814:	d8800017 	ldw	r2,0(sp)
                    alt_putchar(v);
  200818:	11000017 	ldw	r4,0(r2)
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
                } 
                else if (c == 'c')
                {
                    int v = va_arg(args, int);
  20081c:	10800104 	addi	r2,r2,4
  200820:	d8800015 	stw	r2,0(sp)
                    alt_putchar(v);
  200824:	02008fc0 	call	2008fc <alt_putchar>
  200828:	00002c06 	br	2008dc <alt_printf+0x124>
                }
                else if (c == 'x')
  20082c:	00801e04 	movi	r2,120
  200830:	20801e1e 	bne	r4,r2,2008ac <alt_printf+0xf4>
                {
                    /* Process hexadecimal number format. */
                    unsigned long v = va_arg(args, unsigned long);
  200834:	d8800017 	ldw	r2,0(sp)
  200838:	14400017 	ldw	r17,0(r2)
  20083c:	10800104 	addi	r2,r2,4
  200840:	d8800015 	stw	r2,0(sp)
                    unsigned long digit;
                    int digit_shift;

                    /* If the number value is zero, just print and continue. */
                    if (v == 0)
  200844:	88000226 	beq	r17,zero,200850 <alt_printf+0x98>
  200848:	04000704 	movi	r16,28
  20084c:	00000306 	br	20085c <alt_printf+0xa4>
                    {
                        alt_putchar('0');
  200850:	01000c04 	movi	r4,48
  200854:	003ff306 	br	200824 <alt_printf+0x6c>
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
                        digit_shift -= 4;
  200858:	843fff04 	addi	r16,r16,-4
                        continue;
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
  20085c:	008003c4 	movi	r2,15
  200860:	1404983a 	sll	r2,r2,r16
  200864:	8884703a 	and	r2,r17,r2
  200868:	103ffb26 	beq	r2,zero,200858 <alt_printf+0xa0>
  20086c:	00000b06 	br	20089c <alt_printf+0xe4>
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
                    {
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
  200870:	8884703a 	and	r2,r17,r2
  200874:	1406d83a 	srl	r3,r2,r16
                        if (digit <= 9)
  200878:	00800244 	movi	r2,9
                            c = '0' + digit;
  20087c:	19000c04 	addi	r4,r3,48

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
                    {
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
                        if (digit <= 9)
  200880:	10c0012e 	bgeu	r2,r3,200888 <alt_printf+0xd0>
                            c = '0' + digit;
                        else
                            c = 'a' + digit - 10;
  200884:	190015c4 	addi	r4,r3,87
                        alt_putchar(c);
  200888:	21003fcc 	andi	r4,r4,255
  20088c:	2100201c 	xori	r4,r4,128
  200890:	213fe004 	addi	r4,r4,-128
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
  200894:	843fff04 	addi	r16,r16,-4
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
                        if (digit <= 9)
                            c = '0' + digit;
                        else
                            c = 'a' + digit - 10;
                        alt_putchar(c);
  200898:	02008fc0 	call	2008fc <alt_putchar>
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
                    {
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
  20089c:	008003c4 	movi	r2,15
  2008a0:	1404983a 	sll	r2,r2,r16
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
  2008a4:	803ff20e 	bge	r16,zero,200870 <alt_printf+0xb8>
  2008a8:	00000c06 	br	2008dc <alt_printf+0x124>
                        else
                            c = 'a' + digit - 10;
                        alt_putchar(c);
                    }
                }
                else if (c == 's')
  2008ac:	00801cc4 	movi	r2,115
  2008b0:	20800a1e 	bne	r4,r2,2008dc <alt_printf+0x124>
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);
  2008b4:	d8800017 	ldw	r2,0(sp)
  2008b8:	14000017 	ldw	r16,0(r2)
  2008bc:	10800104 	addi	r2,r2,4
  2008c0:	d8800015 	stw	r2,0(sp)
  2008c4:	00000106 	br	2008cc <alt_printf+0x114>

                    while(*s)
                      alt_putchar(*s++);
  2008c8:	02008fc0 	call	2008fc <alt_putchar>
                else if (c == 's')
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);

                    while(*s)
  2008cc:	80800007 	ldb	r2,0(r16)
                      alt_putchar(*s++);
  2008d0:	84000044 	addi	r16,r16,1
  2008d4:	1009883a 	mov	r4,r2
                else if (c == 's')
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);

                    while(*s)
  2008d8:	103ffb1e 	bne	r2,zero,2008c8 <alt_printf+0x110>
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    while ((c = *w++) != 0)
  2008dc:	90c00007 	ldb	r3,0(r18)
  2008e0:	183fc11e 	bne	r3,zero,2007e8 <alt_printf+0x30>
            {
                break;
            }
        }
    }
}
  2008e4:	dfc00417 	ldw	ra,16(sp)
  2008e8:	dc800317 	ldw	r18,12(sp)
  2008ec:	dc400217 	ldw	r17,8(sp)
  2008f0:	dc000117 	ldw	r16,4(sp)
  2008f4:	dec00804 	addi	sp,sp,32
  2008f8:	f800283a 	ret

002008fc <alt_putchar>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
  2008fc:	defffd04 	addi	sp,sp,-12
  200900:	dc000115 	stw	r16,4(sp)
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    char        c1 = (char)(c & 0xff);

    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
  200904:	d80b883a 	mov	r5,sp
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
  200908:	2021883a 	mov	r16,r4
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    char        c1 = (char)(c & 0xff);

    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
  20090c:	01800044 	movi	r6,1
  200910:	01000834 	movhi	r4,32
  200914:	2102cb04 	addi	r4,r4,2860
  200918:	000f883a 	mov	r7,zero
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
  20091c:	dfc00215 	stw	ra,8(sp)
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    char        c1 = (char)(c & 0xff);
  200920:	dc000005 	stb	r16,0(sp)

    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
  200924:	02009a80 	call	2009a8 <altera_avalon_jtag_uart_write>
  200928:	1009883a 	mov	r4,r2
  20092c:	00bfffc4 	movi	r2,-1
  200930:	2080011e 	bne	r4,r2,200938 <alt_putchar+0x3c>
  200934:	2021883a 	mov	r16,r4
    }
    return c;
#else
    return putchar(c);
#endif
}
  200938:	8005883a 	mov	r2,r16
  20093c:	dfc00217 	ldw	ra,8(sp)
  200940:	dc000117 	ldw	r16,4(sp)
  200944:	dec00304 	addi	sp,sp,12
  200948:	f800283a 	ret

0020094c <alt_putstr>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided fputs() routine.
 */
int 
alt_putstr(const char* str)
{
  20094c:	defffe04 	addi	sp,sp,-8
  200950:	dc000015 	stw	r16,0(sp)
  200954:	dfc00115 	stw	ra,4(sp)
  200958:	2021883a 	mov	r16,r4
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
  20095c:	0200a400 	call	200a40 <strlen>
  200960:	800b883a 	mov	r5,r16
  200964:	100d883a 	mov	r6,r2
  200968:	01000834 	movhi	r4,32
  20096c:	2102cb04 	addi	r4,r4,2860
  200970:	000f883a 	mov	r7,zero
#else
    return fputs(str, stdout);
#endif
}
  200974:	dfc00117 	ldw	ra,4(sp)
  200978:	dc000017 	ldw	r16,0(sp)
  20097c:	dec00204 	addi	sp,sp,8
int 
alt_putstr(const char* str)
{
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
  200980:	02009a81 	jmpi	2009a8 <altera_avalon_jtag_uart_write>

00200984 <alt_sys_init>:
 */

void alt_sys_init( void )
{
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
}
  200984:	f800283a 	ret

00200988 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
  200988:	deffff04 	addi	sp,sp,-4
  20098c:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( NIOS2_QSYS_0, nios2_qsys_0);
  200990:	0200a000 	call	200a00 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
  200994:	00800044 	movi	r2,1
  200998:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
  20099c:	dfc00017 	ldw	ra,0(sp)
  2009a0:	dec00104 	addi	sp,sp,4
  2009a4:	f800283a 	ret

002009a8 <altera_avalon_jtag_uart_write>:
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  unsigned int base = sp->base;
  2009a8:	21000017 	ldw	r4,0(r4)

  const char * end = ptr + count;
  2009ac:	298f883a 	add	r7,r5,r6
  2009b0:	20c00104 	addi	r3,r4,4
  2009b4:	00000606 	br	2009d0 <altera_avalon_jtag_uart_write+0x28>

  while (ptr < end)
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
  2009b8:	18800037 	ldwio	r2,0(r3)
  2009bc:	10bfffec 	andhi	r2,r2,65535
  2009c0:	10000326 	beq	r2,zero,2009d0 <altera_avalon_jtag_uart_write+0x28>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
  2009c4:	28800007 	ldb	r2,0(r5)
  2009c8:	29400044 	addi	r5,r5,1
  2009cc:	20800035 	stwio	r2,0(r4)
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
  2009d0:	29fff936 	bltu	r5,r7,2009b8 <altera_avalon_jtag_uart_write+0x10>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);

  return count;
}
  2009d4:	3005883a 	mov	r2,r6
  2009d8:	f800283a 	ret

002009dc <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
  2009dc:	0005883a 	mov	r2,zero
  2009e0:	00c20004 	movi	r3,2048
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  2009e4:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  2009e8:	10800804 	addi	r2,r2,32
  2009ec:	10fffd1e 	bne	r2,r3,2009e4 <alt_dcache_flush_all+0x8>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
  2009f0:	f800283a 	ret

002009f4 <alt_icache_flush_all>:
 */

void alt_icache_flush_all (void)
{
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
  2009f4:	0009883a 	mov	r4,zero
  2009f8:	01440004 	movi	r5,4096
  2009fc:	0200a081 	jmpi	200a08 <alt_icache_flush>

00200a00 <altera_nios2_qsys_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
  200a00:	000170fa 	wrctl	ienable,zero
}
  200a04:	f800283a 	ret

00200a08 <alt_icache_flush>:
  if (len > NIOS2_ICACHE_SIZE)
  {
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;
  200a08:	00840004 	movi	r2,4096
  200a0c:	2007883a 	mov	r3,r4
  200a10:	1140012e 	bgeu	r2,r5,200a18 <alt_icache_flush+0x10>
  200a14:	100b883a 	mov	r5,r2
  200a18:	194b883a 	add	r5,r3,r5
  200a1c:	00000206 	br	200a28 <alt_icache_flush+0x20>

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
  200a20:	1800603a 	flushi	r3
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
  200a24:	18c00804 	addi	r3,r3,32
  200a28:	197ffd36 	bltu	r3,r5,200a20 <alt_icache_flush+0x18>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
  200a2c:	208007cc 	andi	r2,r4,31
  200a30:	10000126 	beq	r2,zero,200a38 <alt_icache_flush+0x30>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
  200a34:	1800603a 	flushi	r3
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
  200a38:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
  200a3c:	f800283a 	ret

00200a40 <strlen>:
  200a40:	20800007 	ldb	r2,0(r4)
  200a44:	10000526 	beq	r2,zero,200a5c <strlen+0x1c>
  200a48:	2007883a 	mov	r3,r4
  200a4c:	18c00044 	addi	r3,r3,1
  200a50:	18800007 	ldb	r2,0(r3)
  200a54:	103ffd1e 	bne	r2,zero,200a4c <strlen+0xc>
  200a58:	1905c83a 	sub	r2,r3,r4
  200a5c:	f800283a 	ret
